import threading
import requests
import urllib
import concurrent.futures
import time
from threading import active_count

n_threads = 400

class TelegramRashkApp:
    def __init__(self):
        self.links = []
        self.logs = []
        self.last_view_count = None  # Ensure this is initialized in the constructor
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=n_threads)  # Initialize executor here
        self.get_links()
        self.start_process()

    def get_links(self):
        link = input("ENTER YOUR TG LINK: ")
        self.links.append(link)

    def update_logs(self, log_message):
        # Log the message only if the view count has changed
        if log_message != self.last_view_count:
            self.logs.append(log_message)
            print(log_message)
            self.last_view_count = log_message

    def start_process(self):
        link_values = self.links
        for link in link_values:
            if not link:
                print("Link field must be filled!")
                return

        self.process_thread = threading.Thread(target=self.process, args=(link_values, True))
        self.process_thread.start()
        self.process_thread.join()  # Ensure main thread waits for process_thread to complete

    def view2(self, proxy, links):
        for i in links:
            channel = i.split('/')[3]
            msgid = i.split('/')[4]
            self.send_seen(channel, msgid, proxy)

    def send_seen(self, channel, msgid, proxy):
        s = requests.Session()
        proxies = {'http': proxy, 'https': proxy}
        try:
            a = s.get(f"https://t.me/{channel}/{msgid}", timeout=10, proxies=proxies)
            cookie = a.headers.get('set-cookie', '').split(';')[0]
            if not cookie:
                return False
        except requests.RequestException as e:
            return False
        h1 = {
            "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br",
            "Accept-Language": "en-US,en;q=0.9,fa;q=0.8,de;q=0.7",
            "Connection": "keep-alive", "Content-Length": "5", "Content-type": "application/x-www-form-urlencoded",
            "Cookie": cookie, "Host": "t.me", "Origin": "https://t.me",
            "Referer": f"https://t.me/{channel}/{msgid}?embed=1",
            "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "User-Agent": "Chrome"
        }
        d1 = {"_rl": "1"}
        try:
            r = s.post(f'https://t.me/{channel}/{msgid}?embed=1', json=d1, headers=h1, proxies=proxies)
            key = r.text.split('data-view="')[1].split('"')[0]
            now_view = r.text.split('<span class="tgme_widget_message_views">')[1].split('</span>')[0]
            if "K" in now_view:
                now_view = now_view.replace("K", "00").replace(".", "")
            self.update_logs(f"\033[92mdone add view:\033[0m {now_view}")
        except (requests.RequestException, IndexError) as e:
            return False
        h2 = {
            "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br",
            "Accept-Language": "en-US,en;q=0.9,fa;q=0.8,de;q=0.7",
            "Connection": "keep-alive", "Cookie": cookie, "Host": "t.me",
            "Referer": f"https://t.me/{channel}/{msgid}?embed=1",
            "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin",
            "User-Agent": "Chrome",
            "X-Requested-With": "XMLHttpRequest"
        }
        try:
            i = s.get(f'https://t.me/v/?views={key}', timeout=10, headers=h2, proxies=proxies)
            if i.text == "true":
                self.update_logs(f"\033[92mdone add view:\033[0m {now_view}")
        except requests.RequestException as e:
            return False
        h3 = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Encoding": "gzip, deflate, br", "Accept-Language": "en-US,en;q=0.9,fa;q=0.8,de;q=0.7",
            "Cache-Control": "max-age=0", "Connection": "keep-alive", "Cookie": cookie, "Host": "t.me",
            "Sec-Fetch-Dest": "document", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-Site": "none",
            "Sec-Fetch-User": "?1", "Upgrade-Insecure-Requests": "1", "User-Agent": "Chrome"
        }
        try:
            s.get(f"https://t.me/{channel}/{msgid}", headers=h3, timeout=10, proxies=proxies)
        except requests.RequestException as e:
            return False

    def scrap(self):
        try:
            https = requests.get("https://api.proxyscrape.com/?request=displayproxies&proxytype=https&timeout=0",
                                 proxies=urllib.request.getproxies(), timeout=5).text
            http = requests.get("https://api.proxyscrape.com/?request=displayproxies&proxytype=http&timeout=0",
                                proxies=urllib.request.getproxies(), timeout=5).text
            socks = requests.get("https://api.proxyscrape.com/?request=displayproxies&proxytype=socks5&timeout=0",
                                 proxies=urllib.request.getproxies(), timeout=5).text
        except requests.RequestException as e:
            print(e)
            return False
        with open("proxies.txt", "w") as f:
            f.write(https + "\n" + http)
        with open("socks.txt", "w") as f:
            f.write(socks)
        return True

    def checker(self, proxy, links):
        self.view2(proxy, links)

    def start(self, links):
        s = self.scrap()
        if not s:
            return
        futures = []
        with open('proxies.txt', 'r') as list:
            proxies = list.readlines()
        futures += [self.executor.submit(self.checker, p.strip(), links) for p in proxies if p.strip()]

        with open('socks.txt', 'r') as list:
            proxies = list.readlines()
        futures += [self.executor.submit(self.checker, f"socks5://{p.strip()}", links) for p in proxies if p.strip()]

        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"Error occurred: {e}")

    def process(self, links, run_forever: bool = False):
        if run_forever:
            while True:
                self.start(links)
                time.sleep(10)  # Adjust sleep time as necessary
        else:
            self.start(links)


def main():
    ascii_art = """
⠀⠀⠀⣴⣾⣿⣿⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢸⣿⣿⣿⣿⣿⣿⠀R4⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⢿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⣉⣩⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣼⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣼⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⣾⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⣾⣿⣿⠉⣿⣿⣿⣿⣿⡄⠀⢀⣠⣤⣤⣀ You:3⠀⠀⠀⠀⠀⠀
⠀⠙⣿⣿⣧⣿⣿⣿⣿⣿⡇⢠⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣷⠸⣿⣿⣿⣿⣿⡿⠀⠈⠀⠂⠀⠀⠀
⠀⠀⠀⠀⠘⠿⢿⣿⣿⣿⣿⡄⠙⠻⠿⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡟⣩⣝⢿⠀⠀⣠⣶⣶⣦⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣷⡝⣿⣦⣠⣾⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⣮⢻⣿⠟⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀⠻⠿⠻⣿⣿⣿⣿⣦⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⠇⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⡆⠀⠀
⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⠇⠀⠀
⠀⠀⠀⠀⠀⠀⢸⣿⣿⡿⠀⠀⠀⢀⣴⣿⣿⣿⣿⣟⣋⣋⣋⣋⣀⠀
⠀⠀⠀⠀⠀⠀⠹⣿⣿⠇⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇
"""
    print(ascii_art)
    app = TelegramRashkApp()

if __name__ == "__main__":
    main()
